class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.d = collections.OrderedDict()


    def get(self, key: int) -> int:
        if key in self.d:
            value = self.d.pop(key)
            self.d[key] = value
            return value
        else:
            return -1



    def put(self, key: int, value: int) -> None:
        if key in self.d:
            v = self.d.pop(key)
        elif len(self.d) >= self.capacity:
            self.d.popitem(last = False)

        self.d[key] = value
        
